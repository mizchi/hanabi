// Generated by CoffeeScript 1.7.1
(function() {
  var Hanabi, PI, clearPoint,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  PI = Math.PI;

  (function(w, r) {
    return w['r' + r] = w['r' + r] || w['webkitR' + r] || w['mozR' + r] || w['msR' + r] || w['oR' + r] || function(c) {
      return w.setTimeout(c, 1000 / 60);
    };
  })(window, 'equestAnimationFrame');

  clearPoint = function(ctx, x, y, size) {
    return requestAnimationFrame(function() {
      ctx.save();
      ctx.beginPath();
      ctx.arc(x, y, size * 1.2, 0, PI * 2, true);
      ctx.clip();
      ctx.clearRect(0, 0, this.width, this.height);
      return ctx.restore();
    });
  };

  Hanabi = (function() {
    function Hanabi(_arg) {
      var angle, i, speed, _i, _ref, _ref1;
      _ref = _arg != null ? _arg : {}, this.quantity = _ref.quantity, this.size = _ref.size, this.reduceRate = _ref.reduceRate, this.gravity = _ref.gravity, this.speed = _ref.speed, this.color = _ref.color, this.width = _ref.width, this.height = _ref.height, this.x = _ref.x, this.y = _ref.y, this.parent = _ref.parent;
      this.render = __bind(this.render, this);
      if (this.quantity == null) {
        this.quantity = 256;
      }
      if (this.size == null) {
        this.size = 4.8;
      }
      if (this.reduceRate == null) {
        this.reduceRate = 0.965;
      }
      if (this.gravity == null) {
        this.gravity = 1.2;
      }
      if (this.speed == null) {
        this.speed = 7.8;
      }
      if (this.color == null) {
        this.color = '#ffcc00';
      }
      if (this.parent == null) {
        this.parent = 'body';
      }
      if (this.x == null) {
        this.x = 0;
      }
      if (this.y == null) {
        this.y = 0;
      }
      if (this.width == null) {
        this.width = 640;
      }
      if (this.height == null) {
        this.height = 480;
      }
      this.canvas = document.createElement('canvas');
      this.ctx = this.canvas.getContext('2d');
      this.canvas.width = 640;
      this.canvas.height = 480;
      this.canvas.style.position = 'absolute';
      this.canvas.style.left = this.x;
      this.canvas.style.top = this.y;
      this.particles = [];
      this.frame = 0;
      for (i = _i = 0, _ref1 = this.quantity; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
        angle = Math.random() * PI * 2;
        speed = Math.random() * this.speed;
        this.particles.push({
          centerX: this.width / 2,
          centerY: this.height / 2,
          velocityX: Math.cos(angle) * speed,
          velocityY: Math.sin(angle) * speed,
          size: this.size
        });
      }
      this.appendTo(this.parent);
    }

    Hanabi.prototype.dispose = function() {
      delete this.quantity;
      delete this.size;
      delete this.reduceRate;
      delete this.gravity;
      delete this.speed;
      delete this.color;
      delete this.width;
      delete this.height;
      delete this.ctx;
      this.parentEl.removeChild(this.canvas);
      delete this.canvas;
      this.particles.length = 0;
      delete this.particles;
      return Object.freeze(this);
    };

    Hanabi.prototype.appendTo = function(query) {
      this.parentEl = document.querySelector(query);
      return this.parentEl.appendChild(this.canvas);
    };

    Hanabi.prototype.updateParticles = function() {
      return this.particles.forEach((function(_this) {
        return function(p, index) {
          var _ref, _ref1;
          p.centerX += p.velocityX;
          p.centerY += p.velocityY;
          p.velocityX *= _this.reduceRate;
          p.velocityY *= _this.reduceRate;
          p.centerY += _this.gravity;
          p.size *= _this.reduceRate;
          if (p.size > 0.1 && (0 < (_ref = p.centerX) && _ref < _this.width) && (0 < (_ref1 = p.centerY) && _ref1 < _this.height)) {
            return '';
          } else {
            return _this.particles.splice(_this.particles.indexOf(p), 1);
          }
        };
      })(this));
    };

    Hanabi.prototype.drawParticles = function() {
      this.ctx.fillStyle = this.frame % 2 ? "rgba(256, 256, 256, 0.8)" : this.color;
      return this.particles.forEach((function(_this) {
        return function(p, index) {
          _this.ctx.beginPath();
          _this.ctx.arc(p.centerX, p.centerY, p.size, 0, PI * 2, true);
          return _this.ctx.fill();
        };
      })(this));
    };

    Hanabi.prototype.fire = function(cb) {
      if (cb) {
        if (this.cb == null) {
          this.cb = cb;
        }
      }
      return this.render();
    };

    Hanabi.prototype.render = function(cb) {
      if (!this.particles.length) {
        this.dispose();
        if (typeof this.cb === "function") {
          this.cb();
        }
        return;
      }
      this.ctx.clearRect(0, 0, this.width, this.height);
      this.frame++;
      this.updateParticles();
      this.drawParticles();
      this.ctx.fillStyle = 'rgba(0, 0, 0, 0.4)';
      return requestAnimationFrame(this.render);
    };

    return Hanabi;

  })();

  if (typeof module !== "undefined" && module !== null ? module.exports : void 0) {
    module.exports = Hanabi;
  } else {
    window.Hanabi = Hanabi;
  }

}).call(this);
